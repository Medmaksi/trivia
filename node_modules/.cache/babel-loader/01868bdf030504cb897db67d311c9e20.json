{"ast":null,"code":"var _jsxFileName = \"/Users/medmaksi/trivia/src/screens/questionsScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport '../styles/questionsStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionsScreen = () => {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [radioState, setRadioState] = useState('');\n  const [points, setPoints] = useState(0);\n  const history = useHistory();\n  let {\n    id\n  } = useParams();\n  useEffect(() => {\n    setQuestions(history.location.statex.detail);\n  }, []);\n  useEffect(() => {\n    console.log(questions);\n  }, [questions]);\n\n  const handleChange = answer => {\n    setRadioState(answer);\n\n    if (answer === questions[id].correct_answer) {\n      setPoints(points + 1);\n    }\n  };\n\n  const Item = ({\n    prop\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: prop[id].category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: prop[id].question.replace(/&amp;/g, '&').replace(/&lt;/, '<').replace(/&gt;/, '>').replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }, this), prop[id].incorrect_answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          checked: radioState === answer,\n          onClick: () => handleChange(answer),\n          value: answer\n        }, answer, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          checked: radioState === prop[id].correct_answer,\n          onClick: () => handleChange(prop[id].correct_answer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: prop[id].correct_answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '1em'\n    },\n    children: questions.length !== 0 ? /*#__PURE__*/_jsxDEV(Item, {\n      prop: questions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 37\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionsScreen, \"3GeeIzVquTHoRb1lHnbWnWGoZPw=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = QuestionsScreen;\nexport default QuestionsScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsScreen\");","map":{"version":3,"sources":["/Users/medmaksi/trivia/src/screens/questionsScreen.js"],"names":["React","useEffect","useState","useParams","useHistory","QuestionsScreen","questions","setQuestions","radioState","setRadioState","points","setPoints","history","id","location","statex","detail","console","log","handleChange","answer","correct_answer","Item","prop","category","question","replace","incorrect_answers","map","display","alignItems","padding","length"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport '../styles/questionsStyle.css';\n\nconst QuestionsScreen = () => {\n    const [questions, setQuestions] = useState([]);\n    const [radioState, setRadioState] = useState('');\n    const [points, setPoints] = useState(0);\n    const history = useHistory();\n    let { id } = useParams();\n\n    useEffect(() => {\n        setQuestions(history.location.statex.detail);\n    },[]);\n\n\n    useEffect(() => {\n        console.log(questions);\n    }, [questions]);\n\n    const handleChange = (answer) => {\n        setRadioState(answer);\n\n        if(answer === questions[id].correct_answer) {\n            setPoints(points+1);\n        }\n    }\n\n    const Item = ({prop}) => {\n        return(\n          <div>\n              <h3>{prop[id].category}</h3>\n              <p>{prop[id].question.replace(/&amp;/g, '&')\n                  .replace(/&lt;/ , '<')\n                  .replace(/&gt;/, '>')\n                  .replace(/&quot;/g,'\"')\n                  .replace(/&#039;/g,\"'\")}</p>\n              {prop[id].incorrect_answers.map((answer) => (\n                  <div style={{display: 'flex', alignItems: 'center'}}>\n                      <input key={answer} type=\"radio\" checked={radioState === answer} onClick={() => handleChange(answer)} value={answer}/>\n                      <p>{answer}</p>\n                  </div>\n              ))}\n              <div style={{display: 'flex', alignItems: 'center'}}>\n                  <input type=\"radio\" checked={radioState === prop[id].correct_answer} onClick={() => handleChange(prop[id].correct_answer)}/>\n                  <p>{prop[id].correct_answer}</p>\n              </div>\n          </div>\n        )\n    }\n\n    return(\n        <div style={{padding: '1em'}}>\n            {questions.length!==0 ? <Item prop={questions}/> : null}\n            \n        </div>\n    )\n}\n\nexport default QuestionsScreen;"]},"metadata":{},"sourceType":"module"}